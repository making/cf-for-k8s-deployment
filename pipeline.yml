resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final
- name: azure-blobstore
  type: docker-image
  source:
    repository: pcfabr/azure-blobstore-resource
- name: slack-notifier
  type: docker-image
  source:
    repository: mockersf/concourse-slack-notifier

params:
  deploy: &deploy-params
    KUBECONFIG_VALUE: ((kubeconfig))
    APP_REGISTRY_USERNAME: ((docker_username))
    APP_REGISTRY_PASSWORD: ((docker_password))
    APP_REGISTRY_HOSTNAME: ((docker_hostname))
    APP_REGISTRY_REPOSITORY_PREFIX: ((docker_repository))
    PIVNET_USERNAME: ((pivnet_username))
    PIVNET_PASSWORD: ((pivnet_password))
    DOMAIN: ((dns_subdomain)).((dns_suffix))
    IDP_METADATA: ((idp-metadata))
  smtp: &smtp-params
    SMTP_HOST: ((smtp_host))
    SMTP_PORT: ((smtp_port))
    SMTP_USER: ((smtp_user))
    SMTP_PASSWORD: ((smtp_password))
    SMTP_STARTTLS: ((smtp_starttls))
    SMTP_FROM_ADDRESS: ((smtp_from_address))

resources:
- name: tas-for-kubernetes
  type: pivnet
  source:
    api_token: ((pivnet_api_token))
    product_slug: tas-for-kubernetes
    product_version: 0\.5\..*
- name: reissue-certificates
  type: time
  icon: autorenew
  source:
    interval: 720h
- name: deployment
  type: git
  icon: github
  source:
    uri: https://github.com/making/cf-for-k8s-deployment
    branch: tas
- name: cf-mgmt
  type: git
  icon: github
  source:
    uri: https://github.com/making/cf-mgmt-cf4k8s
    branch: master
- name: certificates
  type: azure-blobstore
  icon: certificate
  source:
    storage_account_name: ((controlplane_ci_account_name))
    storage_account_key: ((controlplane_ci_storage_account_access_key))
    container: ((dns_subdomain))-((controlplane_ci_storage_container_name))
    versioned_file: certificates.tgz
- name: deployment-values
  type: azure-blobstore
  icon: clipboard-text
  source:
    storage_account_name: ((controlplane_ci_account_name))
    storage_account_key: ((controlplane_ci_storage_account_access_key))
    container: ((dns_subdomain))-((controlplane_ci_storage_container_name))
    versioned_file: deployment-values.yml
- name: notify
  type: slack-notifier
  icon: slack
  source:
    url: ((slack_webhook_url))
- name: synchronizer
  type: time
  icon: autorenew
  source:
    interval: 10m

jobs:
- name: generate-certificate
  plan:
  - in_parallel:
    - get: reissue-certificates
      trigger: true
  - task: generate-certificate
    params:
      AZURE_CLIENT_ID: ((client_id))
      AZURE_CLIENT_SECRET: ((client_secret))
      AZURE_SUBSCRIPTION_ID: ((subscription_id))
      AZURE_TENANT_ID: ((tenant_id))
      AZURE_RESOURCE_GROUP: ((resource_group))
      SUBDOMAIN: ((dns_subdomain)).((dns_suffix))
      EMAIL: ((email))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: goacme/lego
      outputs:
      - name: lego
      run:
        path: sh
        args:
        - -cex
        - |
          lego --accept-tos \
            --key-type=rsa4096 \
            --domains="*.${SUBDOMAIN}" \
            --domains="*.uaa.${SUBDOMAIN}" \
            --domains="*.login.${SUBDOMAIN}" \
            --domains="*.apps.${SUBDOMAIN}" \
            --domains="*.sys.${SUBDOMAIN}" \
            --domains="*.uaa.sys.${SUBDOMAIN}" \
            --domains="*.login.sys.${SUBDOMAIN}" \
            --email=${EMAIL} \
            --dns=azure \
            run
          tar czf certificates.tgz -C .lego certificates
          mv certificates.tgz lego
  - put: certificates
    params:
      file: lego/certificates.tgz

- name: generate-values
  plan:
  - in_parallel:
    - get: tas-for-kubernetes
      params:
        globs: ["*.tar"]
        unpack: true
  - task: generate-values
    params:
      <<: *deploy-params
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: relintdockerhubpushbot/cf-for-k8s-ci
      inputs:
      - name: tas-for-kubernetes
      outputs:
      - name: deployment-values
      run:
        path: bash
        args:
        - -cexo
        - pipefail
        - |
          BASE_DIR=$(pwd)
          ${BASE_DIR}/tas-for-kubernetes/tanzu-application-service/bin/generate-values.sh \
          	    -d ${DOMAIN} > ${BASE_DIR}/deployment-values/deployment-values.yml

  - put: deployment-values
    params:
      file: deployment-values/deployment-values.yml

- name: see-changes
  plan:
  - in_parallel:
    - get: tas-for-kubernetes
      params:
        globs: ["*.tar"]
        unpack: true
      trigger: true
    - get: deployment-values
      passed:
      - generate-values
      trigger: true
    - get: certificates
      passed:
      - generate-certificate
  - task: see-changes
    params:
      <<: *deploy-params
      <<: *smtp-params
      KAPP_OPTS: --diff-run
    config: &kapp-deploy
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: relintdockerhubpushbot/cf-for-k8s-ci
      inputs:
      - name: tas-for-kubernetes
      - name: deployment-values
      - name: certificates
      run:
        path: bash
        args:
        - -cex
        - |
          mkdir -p ~/.kube
          cat <<EOF > ~/.kube/config
          ${KUBECONFIG_VALUE}
          EOF
          BASE_DIR=$(pwd)

          # Let's Encrypt
          tar xzf ./certificates/certificates.tgz

          BEGIN_LINE=$(grep -n system_certificate ${BASE_DIR}/deployment-values/deployment-values.yml | awk -F : '{print $1}')
          END_LINE=$(grep -n internal_certificate ${BASE_DIR}/deployment-values/deployment-values.yml | awk -F : '{print $1}')

          set +x
          LE_CERT=$(openssl base64 -in certificates/_.${DOMAIN}.crt | tr -d '\n')
          LE_KEY=$(openssl base64 -in certificates/_.${DOMAIN}.key | tr -d '\n')

          sed -i \
            -e "${BEGIN_LINE},${END_LINE} s/crt:.*/crt: ${LE_CERT}/" \
            -e "${BEGIN_LINE},${END_LINE} s/key:.*/key: ${LE_KEY}/" \
            -e "${BEGIN_LINE},${END_LINE} s/ca:.*/ca: \"\"/" \
            ${BASE_DIR}/deployment-values/deployment-values.yml
          set -x

          BEGIN_LINE=$(grep -n log_cache_ca ${BASE_DIR}/deployment-values/deployment-values.yml | awk -F : '{print $1}')
          END_LINE=$((2 + $(grep -n log_cache_syslog ${BASE_DIR}/deployment-values/deployment-values.yml | awk -F : '{print $1}')))
          sed -i -e "${BEGIN_LINE},${END_LINE} d" ${BASE_DIR}/deployment-values/deployment-values.yml

          # Configure LoadBalancer
          cat <<EOF > ${BASE_DIR}/deployment-values/load-balancer-values.yml
          #@library/ref "@github.com/cloudfoundry/cf-for-k8s"
          #@data/values
          ---
          enable_load_balancer: True
          remove_resource_requirements: True
          add_metrics_server_components: True
          metrics_server_prefer_internal_kubelet_address: True
          EOF

          # Configure AppRegistry
          cat <<EOF > ${BASE_DIR}/deployment-values/app-registry-values.yml
          #@library/ref "@github.com/cloudfoundry/cf-for-k8s"
          #@data/values
          ---
          app_registry:
            hostname: ${APP_REGISTRY_HOSTNAME}
            repository_prefix: ${APP_REGISTRY_REPOSITORY_PREFIX}
            username: ${APP_REGISTRY_USERNAME}
            password: ${APP_REGISTRY_PASSWORD}
          EOF

          # Configure SystemRegistry
          cat <<EOF > ${BASE_DIR}/deployment-values/system-registry-values.yml
          #@data/values
          ---
          system_registry:
            hostname: registry.pivotal.io
            username: "${PIVNET_USERNAME}"
            password: "${PIVNET_PASSWORD}"
          EOF

          # Configure AppsManager
          cat <<EOF > ${BASE_DIR}/deployment-values/apps-manager-values.yml
          #@library/ref "@github.com/pivotal/apps-manager-k8s-release"
          #@data/values
          ---
          apps_manager:
            currency_lookup: "{\"usd\":\"$\",\"eur\":\"€\"}"
            display_plan_prices: "false"
            enable_invitations: "true"
            poll_interval: 30
            app_details_poll_interval: 10
            resources:
              instances: 1
              memory: 128
            whitelabeling:
              product_name: "Apps Manager"
              accent_color: "#00A79D"
              favicon: ""
              footer_links: "[]"
          search_server:
            resources:
              instances: 1
              memory: 256
          invitations:
            resources:
              instances: 1
              memory: 256
          EOF

          # Patch
          sed -i "s/21b6a7b23c249ca7a29cc949b534b12043b78c1449ed4a313663cb9c98d6fd89/feadf8ea9a47eb94028239d37a8897b17542ca3f110629788d89564fa0b69398/" \
                 ${BASE_DIR}/deployment-values/deployment-values.yml

          # Patch uaa.lib.yml
          sed -i -e "/smtp:/,/from_address:/ d" \
                 ${BASE_DIR}/tas-for-kubernetes/tanzu-application-service/config/_ytt_lib/github.com/cloudfoundry/cf-for-k8s/config/uaa/_ytt_lib/uaa/k8s/templates/uaa.lib.yml
          cat <<EOF >> smtp.yml
          smtp:
            host: ${SMTP_HOST}
            port: ${SMTP_PORT}
            user: ${SMTP_USER}
            password: ${SMTP_PASSWORD}
            from_address: ${SMTP_FROM_ADDRESS}
            auth: true
            starttls: ${SMTP_STARTTLS}
          EOF
          sed -i -e "/#@ end/i $(cat smtp.yml | perl -pe 's/\n/\\n/g')" \
                 ${BASE_DIR}/tas-for-kubernetes/tanzu-application-service/config/_ytt_lib/github.com/cloudfoundry/cf-for-k8s/config/uaa/_ytt_lib/uaa/k8s/templates/uaa.lib.yml

          wget -q https://raw.githubusercontent.com/making/cf-for-k8s-deployment/master/logo/logo_transparent.png
          # Brinding
          cat <<EOF > branding-config.yml
          login:
            branding:
              companyName: cf.maki.lol
              productLogo: $(cat logo_transparent.png| base64 | tr -d '\n')
              squareLogo: $(cat logo_transparent.png| base64 | tr -d '\n')
          EOF
          set +x
          sed -i -e "/#@ end/i $(cat branding-config.yml | perl -pe 's/\n/\\n/g')" \
                 ${BASE_DIR}/tas-for-kubernetes/tanzu-application-service/config/_ytt_lib/github.com/cloudfoundry/cf-for-k8s/config/uaa/_ytt_lib/uaa/k8s/templates/uaa.lib.yml
          set -x

          # SAML
          cat <<EOF > saml-config.yml
          login:
            saml:
              socket:
                connectionManagerTimeout: 10000
                soTimeout: 10000
              providers:
                azure-ad:
                  attributeMappings:
                    email:
                    external_groups:
                    family_name:
                    given_name:
                  emailDomain: []
                  linkText: Azure AD
                  metadataTrustCheck: false
                  nameID: urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress
                  showSamlLoginLink: true
                  idpMetadata: ${IDP_METADATA}
          EOF
          sed -i -e "/login:/a $(cat saml-config.yml | perl -pe 's/\n/\\n/g')" \
                 -e 's/login:$//'\
                 ${BASE_DIR}/tas-for-kubernetes/tanzu-application-service/config/_ytt_lib/github.com/cloudfoundry/cf-for-k8s/config/uaa/_ytt_lib/uaa/k8s/templates/uaa.lib.yml

          kapp deploy -y -a cf -f <(\
            ytt \
              -f ${BASE_DIR}/tas-for-kubernetes/tanzu-application-service/config \
              -f ${BASE_DIR}/deployment-values \
              --data-values-env YTT_TAS \
              --data-values-env @github.com/cloudfoundry/cf-for-k8s:YTT_CF \
              | kbld -f- ) \
            -c ${KAPP_OPTS}
    on_success:
      put: notify
      params:
        message: 🆕 New version of tas-for-k8s has been released!
        alert_type: success
    on_failure:
      put: notify
      params:
        message: ❌ See chages job failed!
        alert_type: failed
- name: deploy-cf-for-k8s
  plan:
  - in_parallel:
    - get: tas-for-kubernetes
      params:
        globs: ["*.tar"]
        unpack: true
      passed:
      - see-changes
    - get: deployment-values
      passed:
      - see-changes
      trigger: true
    - get: certificates
      passed:
      - generate-certificate
    - get: synchronizer
  - task: deploy-cf-for-k8s
    attempts: 2
    params:
      <<: *deploy-params
      <<: *smtp-params
      KAPP_OPTS: -y
    config:
      <<: *kapp-deploy
    on_failure:
      put: notify
      params:
        message: ❌ Deploying CF4k8s failed!
        alert_type: failed
- name: smoke-test
  plan:
  - in_parallel:
    - get: tas-for-kubernetes
      params:
        globs: ["*.tar"]
        unpack: true
      passed:
      - deploy-cf-for-k8s
    - get: deployment-values
      passed:
      - deploy-cf-for-k8s
    - get: synchronizer
      trigger: true
      passed:
      - deploy-cf-for-k8s
  - task: prepare-env
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: relintdockerhubpushbot/cf-for-k8s-ci
      inputs:
      - name: deployment-values
      outputs:
      - name: env
      run:
        path: bash
        args:
        - -cex
        - |
          cat <<EOF > env/env.sh
          export SMOKE_TEST_API_ENDPOINT=api.$(bosh int deployment-values/deployment-values.yml --path /system_domain)
          export SMOKE_TEST_APPS_DOMAIN=$(bosh int deployment-values/deployment-values.yml --path /app_domains/0)
          export SMOKE_TEST_USERNAME=admin
          export SMOKE_TEST_PASSWORD=$(bosh int deployment-values/deployment-values.yml  --path /cf_admin_password)
          export SMOKE_TEST_SKIP_SSL=false
          EOF

  - task: smoke-test
    attempts: 3
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: relintdockerhubpushbot/cf-test-runner
      inputs:
      - name: env
      - name: tas-for-kubernetes
      run:
        path: bash
        args:
        - -cex
        - |
          source env/env.sh
          ./tas-for-kubernetes/tanzu-application-service/config/_ytt_lib/github.com/cloudfoundry/cf-for-k8s/hack/run-smoke-tests.sh
    on_success:
      put: notify
      params:
        message: ✅ Smoke test succeeded!
        alert_type: success
    on_failure:
      put: notify
      params:
        message: ❌ Smoke test failed!
        alert_type: failed

- name: post-deploy
  plan:
  - in_parallel:
    - get: deployment
    - get: deployment-values
      passed:
      - smoke-test
      trigger: true
  - task: prepare-env
    config: &prepare-env-config
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: relintdockerhubpushbot/cf-for-k8s-ci
      inputs:
      - name: deployment-values
      outputs:
      - name: env
      run:
        path: bash
        args:
        - -cex
        - |
          cat <<EOF > env/env.sh
          export SYSTEM_DOMAIN=$(bosh int deployment-values/deployment-values.yml --path /system_domain)
          export APPS_DOMAIN=$(bosh int deployment-values/deployment-values.yml --path /app_domains/0)
          export CF_USERNAME=admin
          export CF_PASSWORD=$(bosh int deployment-values/deployment-values.yml  --path /cf_admin_password)
          export ADMIN_CLIENT_SECRET=$(bosh int deployment-values/deployment-values.yml  --path /uaa/admin_client_secret)
          EOF
          cp /usr/local/bin/bosh env/
  - task: post-deploy
    params:
      ELEPHANTSQL_API_KEY: ((elephantsql_api_key))
      SHARED_MYSQL_HOSTNAME: ((shared_mysql_hostname))
      SHARED_MYSQL_PORT: ((shared_mysql_port))
      SHARED_MYSQL_USERNAME: ((shared_mysql_username))
      SHARED_MYSQL_PASSWORD: ((shared_mysql_password))
      SHARED_MYSQL_DATABASE: ((shared_mysql_database))
      SHARED_MYSQL_BROKER_ADMIN_PASSWORD: ((shared_mysql_broker_admin_password))
      SERVICE_BROKER_CLOUDAMQP_APIKEY: ((service_broker_cloudamqp_apikey))
      CLOUDKARAFKA_API_KEY: ((cloudkarafka_api_key))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: relintdockerhubpushbot/cf-test-runner
      inputs:
      - name: env
      - name: deployment
      - name: deployment-values
      run:
        path: bash
        args:
        - -cex
        - |
          export PATH=${PATH}:${PWD}/env
          source env/env.sh
          cp deployment-values/deployment-values.yml deployment/configuration-values
          cf login -a api.${SYSTEM_DOMAIN} \
          	       -u ${CF_USERNAME} \
          	       -p ${CF_PASSWORD}\
          	       -o system
          cf enable-feature-flag diego_docker
          cf create-space system -o system
          cf create-org demo
          cf create-space demo -o demo
          ./deployment/hack/install-elephantsql-service-broker.sh
          ./deployment/hack/install-shared-mysql-service-broker.sh
          ./deployment/hack/install-cloudamqp.sh
          ./deployment/hack/install-cloudkarafka-service-broker.sh
  - task: post-deploy-with-uaa
    params: &devconnect-creds
      CF_MGMT_SECRET: ((cf_mgmt_secret))
      TAS_UUID: ((tas_uuid))
      TAS_NAME: ((tas_name))
      DEVCONNECT_LOGIN_CLIENT_SECRET: ((devconnect_login_client_secret))
      DEVCONNECT_AUTH_CLIENT_SECRET: ((devconnect_auth_client_secret))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: starkandwayne/concourse
      inputs:
      - name: env
      - name: deployment
      - name: deployment-values
      run:
        path: bash
        args:
        - -cex
        - |
          export PATH=${PATH}:${PWD}/env
          source env/env.sh
          cf login -a api.${SYSTEM_DOMAIN} \
          	       -u ${CF_USERNAME} \
          	       -p ${CF_PASSWORD}\
          	       -o system
          uaac target uaa.${SYSTEM_DOMAIN}
          uaac token client get admin -s ${ADMIN_CLIENT_SECRET}
          set +e
          uaac client add cf-mgmt \
            --name cf-mgmt \
            --secret ${CF_MGMT_SECRET} \
            --authorized_grant_types client_credentials,refresh_token \
            --authorities cloud_controller.admin,scim.read,scim.write,routing.router_groups.read
          set -e
          set +e
          uaac client add devconnect_login_client \
            --name devconnect_login_client \
            --secret ${DEVCONNECT_LOGIN_CLIENT_SECRET} \
            --scope openid,profile \
            --authorized_grant_types authorization_code \
            --redirect_uri https://devconnect.${APPS_DOMAIN}/oauth2
          set -e
          set +e
          uaac client add devconnect_${TAS_NAME}_auth_client \
            --name devconnect_${TAS_NAME}_auth_client \
            --secret ${DEVCONNECT_AUTH_CLIENT_SECRET} \
            --scope openid --authorized_grant_types authorization_code \
            --redirect_uri https://devconnect.${APPS_DOMAIN}/api/v1/foundations/${TAS_UUID}/oauth2
          set -e

- name: cf-mgmt-apply
  plan:
  - in_parallel:
    - get: cf-mgmt
    - get: deployment-values
      passed:
      - post-deploy
      trigger: true
  - task: prepare-env
    config:
      <<: *prepare-env-config
  - task: cf-mgmt-apply
    params:
      USER_ID: cf-mgmt
      CLIENT_SECRET: ((cf_mgmt_secret))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pivotalservices/cf-mgmt
          tag: 1.0.45
      inputs:
      - name: env
      - name: deployment-values
      - name: cf-mgmt
      run:
        path: bash
        args:
        - -cex
        - |
          source env/env.sh
          cf-mgmt apply --config-dir=./cf-mgmt/config

- name: delete-cf-for-k8s
  plan:
  - in_parallel:
    - get: deployment
    - get: synchronizer
  - task: delete-cf-for-k8s
    attempts: 2
    params:
      KUBECONFIG_VALUE: ((kubeconfig))
      APP_REGISTRY_USERNAME: ((docker_username))
      APP_REGISTRY_PASSWORD: ((docker_password))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: relintdockerhubpushbot/cf-for-k8s-ci
      inputs:
      - name: deployment
      run:
        path: bash
        args:
        - -cex
        - |
          mkdir -p ~/.kube
          cat <<EOF > ~/.kube/config
          ${KUBECONFIG_VALUE}
          EOF
          kapp delete -a cf -y

- name: clear-harbor-project
  plan:
  - in_parallel:
    - get: synchronizer
      passed:
      - delete-cf-for-k8s
      trigger: true
  - task: clear-harbor-project
    params:
      HARBOR_URL: https://((docker_hostname))
      HARBOR_USER: ((docker_username))
      HARBOR_PASSWORD: ((docker_password))
      HARBOR_PROJECT: cf-for-k8s
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: relintdockerhubpushbot/cf-for-k8s-ci
      run:
        path: bash
        args:
        - -ce
        - |
          curl -s -k -u ${HARBOR_USER}:${HARBOR_PASSWORD} "${HARBOR_URL}/api/v2.0/projects/${HARBOR_PROJECT}/repositories?page_size=1000" | jq -r ".[].name" | sed "s|${HARBOR_PROJECT}/||g" > repos.txt
          for r in  $(cat repos.txt);do
            echo $r;
            curl -s -k -u ${HARBOR_USER}:${HARBOR_PASSWORD} -XDELETE "${HARBOR_URL}/api/v2.0/projects/${HARBOR_PROJECT}/repositories/$r";
          done

- name: show-generated-values
  plan:
  - in_parallel:
    - get: deployment-values
      passed:
      - generate-values
  - task: show-generated-values
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: relintdockerhubpushbot/cf-for-k8s-ci
      inputs:
      - name: deployment-values
      run:
        path: bash
        args:
        - -cex
        - |
          cat deployment-values/deployment-values.yml

- name: upload-certificates-to-exit-server
  plan:
  - in_parallel:
    - get: certificates
      passed:
      - generate-certificate
      trigger: true
  - task: upload-certificates-to-exit-server
    params:
      DOMAIN: ((dns_subdomain)).((dns_suffix))
      EXIT_SERVER_IP: ((ssh_server_ip))
      EXIT_SERVER_SSH_PRIVATE_KEY: ((exit_server_ssh_private_key))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: relintdockerhubpushbot/cf-for-k8s-ci
      inputs:
      - name: certificates
      run:
        path: bash
        args:
        - -cexo
        - pipefail
        - |
          cat <<EOF > ssh.pem
          ${EXIT_SERVER_SSH_PRIVATE_KEY}
          EOF
          tar xzf ./certificates/certificates.tgz
          chmod 600 ssh.pem
          scp -o "StrictHostKeyChecking=no" \
              -i ssh.pem \
              ./certificates/_.* \
              jumpbox@${EXIT_SERVER_IP}:/tmp/
          ssh -o "StrictHostKeyChecking=no" \
              -i ssh.pem \
              jumpbox@${EXIT_SERVER_IP} \
              'sudo chown root:www-data /tmp/_.* && sudo chmod g+r /tmp/_.* && sudo mv /tmp/_.* /etc/ssl/caddy/config/lego/certificates/'
